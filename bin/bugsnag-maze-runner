#!/usr/bin/env ruby
# frozen_string_literal: true

require 'cucumber/cli/main'
require 'optimist'
require_relative '../lib/features/support/maze_runner'
require_relative '../lib/version'

# Encapsulates the MazeRunner entry point
class MazeRunnerEntry

  OPTION_SEPARATE_SESSIONS = 'separate-sessions'

  def initialize
    @parser = Optimist::Parser.new do
      text 'Maze Runner extends the functionality of Cucumber, ' \
        'providing all of the command line arguments that it provides.'
      text ''
      text 'Usage [OPTIONS] <filenames>'
      text ''
      text 'Overridden Cucumber options:'
      opt :help, 'Print this help.'
      opt :init, 'Initialises a new Maze Runner project'

      opt :version, 'Display Maze Runner and Cucumber versions'
      opt OPTION_SEPARATE_SESSIONS, 'Start a new Appium session for each scenario', short: :none
      version "Maze Runner v#{BugsnagMazeRunner::VERSION} " \
              "(Cucumber v#{Cucumber::VERSION.strip})"
      text ''
      text 'The Cucumber help follows:'
      text ''
    end
    # Allow for options destined for Cucumber
    @parser.ignore_invalid_options = true
  end

  def init
    require_relative 'commands/init'
    exit 0
  end

  # Removes Maze Runner specific args from the array, as these will cause Cucumber to error.
  def remove_maze_runner_args
    [
      OPTION_SEPARATE_SESSIONS
    ].each { |arg| @args.delete "--#{arg}" }
  end

  # Adds arguments to the Cucumber
  def add_cucumber_args
    @args << 'features' if @args.empty?

    # Add strict mode unless any no/strict option is given,
    # but also allow flaky tests if --retry was provided.
    regex = /--(no-)?strict(-(undefined|pending|flaky))?/
    if @args.all? { |arg| regex.match(arg).nil? }
      if @args.any? '--retry'
        @args << '--strict-undefined' << '--strict-pending'
      else
        @args << '--strict'
      end
    end

    # Load internal steps and helper functions
    load_dir = File.expand_path(File.dirname(File.dirname(__FILE__))).freeze
    paths = Dir.glob("#{load_dir}/lib/features/**/*.rb")

    # Load project-specific steps and helper functions
    paths += Dir.glob('features/{support,steps}/*.rb')
    paths.each { |path| @args << '-r' << path }
  end

  def start(args)
    # Parse args, processing any Maze Runner specific options
    @args = args.dup
    options = @parser.parse args

    init if options[:init]
    MazeRunner.configuration.appium_session_isolation = true if options[OPTION_SEPARATE_SESSIONS]

    # Adjust CL options before calling down to Cucumber
    remove_maze_runner_args
    add_cucumber_args
    Cucumber::Cli::Main.new(@args).execute!

  rescue Optimist::HelpNeeded
    # Display
    @parser.educate
    Cucumber::Cli::Main.new(['--help']).execute!

  rescue Optimist::VersionNeeded
    puts @parser.version
  end
end

MazeRunnerEntry.new.start(ARGV)
