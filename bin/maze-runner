#!/usr/bin/env ruby
# frozen_string_literal: true

require 'cucumber/cli/main'

require_relative '../lib/utils/deep_merge'

require_relative '../lib/maze'

require_relative '../lib/maze/appium_server'
require_relative '../lib/maze/api/appium/file_manager'
require_relative '../lib/maze/bugsnag_config'
require_relative '../lib/maze/client/bb_api_client'
require_relative '../lib/maze/client/bb_client_utils'
require_relative '../lib/maze/client/bs_client_utils'
require_relative '../lib/maze/client/appium'
require_relative '../lib/maze/client/appium/base_client'
require_relative '../lib/maze/client/appium/bb_client'
require_relative '../lib/maze/client/appium/bb_devices'
require_relative '../lib/maze/client/appium/bs_client'
require_relative '../lib/maze/client/appium/bs_legacy_client'
require_relative '../lib/maze/client/appium/bs_devices'
require_relative '../lib/maze/client/appium/local_client'
require_relative '../lib/maze/client/selenium'
require_relative '../lib/maze/client/selenium/base_client'
require_relative '../lib/maze/client/selenium/bb_client'
require_relative '../lib/maze/client/selenium/bs_client'
require_relative '../lib/maze/client/selenium/local_client'

require_relative '../lib/maze/aws_public_ip'
require_relative '../lib/maze/compare'
require_relative '../lib/maze/docker'
require_relative '../lib/maze/document_server'
require_relative '../lib/maze/errors'
require_relative '../lib/maze/generator'
require_relative '../lib/maze/helper'
require_relative '../lib/maze/http_request'
require_relative '../lib/maze/logger'
require_relative '../lib/maze/macos_utils'
require_relative '../lib/maze/maze_output'
require_relative '../lib/maze/metrics_processor'
require_relative '../lib/maze/network'
require_relative '../lib/maze/proxy'
require_relative '../lib/maze/retry_handler'
require_relative '../lib/maze/repeaters/request_repeater'
require_relative '../lib/maze/repeaters/aspecto_repeater'
require_relative '../lib/maze/repeaters/bugsnag_repeater'
require_relative '../lib/maze/runner'
require_relative '../lib/maze/terminating_server'

require_relative '../lib/maze/servlets/base_servlet'
require_relative '../lib/maze/servlets/command_servlet'
require_relative '../lib/maze/servlets/servlet'
require_relative '../lib/maze/servlets/log_servlet'
require_relative '../lib/maze/servlets/trace_servlet'
require_relative '../lib/maze/servlets/reflective_servlet'
require_relative '../lib/maze/server'

require_relative '../lib/maze/assertions/request_set_assertions'

require_relative '../lib/maze/schemas/trace_schema'
require_relative '../lib/maze/schemas/trace_validator'
require_relative '../lib/maze/schemas/validator'

require_relative '../lib/maze/store'
require_relative '../lib/maze/timers'

require_relative '../lib/maze/checks/noop_check'
require_relative '../lib/maze/checks/assert_check'

require_relative '../lib/maze/option'
require_relative '../lib/maze/option/parser'
require_relative '../lib/maze/option/processor'
require_relative '../lib/maze/option/validator'


require_relative '../lib/maze/hooks/hooks'
require_relative '../lib/maze/hooks/appium_hooks'
require_relative '../lib/maze/hooks/browser_hooks'
require_relative '../lib/maze/hooks/command_hooks'
require_relative '../lib/maze/hooks/error_code_hook'

require_relative '../lib/maze/driver/appium'
require_relative '../lib/maze/driver/browser'

require_relative '../lib/maze/plugins/bugsnag_reporting_plugin'
require_relative '../lib/maze/plugins/cucumber_report_plugin'
require_relative '../lib/maze/plugins/error_code_plugin'
require_relative '../lib/maze/plugins/global_retry_plugin'
require_relative '../lib/maze/plugins/datadog_metrics_plugin'

# Require monkey-patches after everything else
require_relative '../lib/utils/selenium_money_patch'

# Encapsulates the MazeRunner entry point
class MazeRunnerEntry

  # Removes Maze Runner specific args from the array, as these will cause Cucumber to error.
  def remove_maze_runner_args
    Maze::Option.constants.each do |opt|
      name = Maze::Option.const_get(opt)
      @args.reject! { |arg| arg == "--#{name}" || (arg.start_with? "--#{name}=") || arg == "--no-#{name}" }
    end
  end

  # Adds arguments to Cucumber
  def add_cucumber_args
    @args << 'features' if @args.empty?
    @args << '--publish-quiet'
    @args << '--color'

    # Pass strict mode options through to cucumber if present
    # If not we default to strict for undefined and pending results,
    # but no-strict for flaky in order to allow retries
    regex = /--(no-)?strict(-(undefined|pending|flaky))?/
    if @args.all? { |arg| regex.match(arg).nil? }
      @args << '--strict-undefined' << '--strict-pending' << '--no-strict-flaky'
    end

    # Expand by default
    if @args.include?('--no-expand')
      # Just remove it
      @args = @args - ["--no-expand"]
    else
      # Expand
      @args << "--expand"
    end

    # Load internal steps and helper functions
    load_dir = File.expand_path(File.dirname(File.dirname(__FILE__))).freeze
    paths = Dir.glob("#{load_dir}/lib/features/**/*.rb")

    # Load project-specific steps and helper functions
    paths += Dir.glob('features/{support,steps}/*.rb')
    paths.each { |path| @args << '-r' << path }
  end

  # List devices for the given device farm, or all otherwise

  def start(args)
    $logger.info "Maze Runner v#{Maze::VERSION}"

    # Parse args, processing any Maze Runner specific options
    @args = args.dup
    options = Maze::Option::Parser.parse args

    if options[Maze::Option::LIST_DEVICES]
      case options[Maze::Option::FARM].to_sym
      when :bs
        Maze::Client::Appium::BrowserStackDevices.list_devices('ios')
        Maze::Client::Appium::BrowserStackDevices.list_devices('android')
      when :bb
        unless options[Maze::Option::ACCESS_KEY]
          puts 'Listing BitBar devices or device groups available requires a valid access key'
          exit 1
        end
        access_key = options[Maze::Option::ACCESS_KEY]
        if options[Maze::Option::DEVICE] && !options[Maze::Option::DEVICE].empty?
          options[Maze::Option::DEVICE].each do |device_group|
            Maze::Client::Appium::BitBarDevices.list_devices_for_group(device_group, access_key)
          end
        else
          Maze::Client::Appium::BitBarDevices.list_device_groups(access_key)
        end
      else
        Maze::Client::Appium::BrowserStackDevices.list_devices('ios')
        Maze::Client::Appium::BrowserStackDevices.list_devices('android')
      end
      exit 0
    end

    # Validate CL options
    errors = Maze::Option::Validator.new.validate options
    unless errors.empty?
      puts errors
      exit 1
    end

    Maze::Option::Processor.populate Maze.config, options

    # Adjust CL options before calling down to Cucumber
    remove_maze_runner_args
    add_cucumber_args

    Cucumber::Cli::Main.new(@args).execute!
  end
end

MazeRunnerEntry.new.start(ARGV)
