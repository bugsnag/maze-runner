#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/maze'
require_relative '../lib/maze/browser_stack_utils'
require_relative '../lib/maze/logger'
require 'net/http'
require 'json'
require 'uri'
require 'optimist'
require 'fileutils'

class DownloadLogEntry
  def start(args)
    p = Optimist::Parser.new do
      text 'Download device sessions logs from BrowserStack using the build ID'
      text ''
      text 'Usage [OPTIONS] <filenames>'
      text ''
      text 'Overridden Cucumber options:'
      opt :help,
          'Print this help.'
      opt :build_id,
          "ID of the BrowserStack build",
          :type => :string
    end

    opts = Optimist::with_standard_exception_handling p do
      raise Optimist::HelpNeeded if ARGV.empty? # show help screen
      p.parse ARGV
    end

    # Get browserstack username and access key from the environment
    # TODO pull these in the same way that MazeRunner does
    username = ENV['BROWSER_STACK_USERNAME']
    access_key = ENV['BROWSER_STACK_ACCESS_KEY']


    build_info = Maze::BrowserStackUtils.build_info username,
                                                    access_key,
                                                    opts[:build_id]
    
    $logger.info "Getting logs for build: #{opts[:build_id]}"

    build_info.each_with_index do |session, index|
      $logger.info "Downloading Device Logs for Session: #{index + 1}"
      Maze::BrowserStackUtils.download_log username,
                                           access_key,
                                           opts[:build_id],
                                           session['automation_session']['device_logs_url'],
                                           index + 1

      $logger.info "Downloading Appium Logs for Session: #{index + 1}"
      Maze::BrowserStackUtils.download_log username,
                                           access_key,
                                           opts[:build_id],
                                           session['automation_session']['appium_logs_url'],
                                           index + 1

    end
  end
end

DownloadLogEntry.new.start(ARGV)
