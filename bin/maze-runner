#!/usr/bin/env ruby
# frozen_string_literal: true

require 'cucumber/cli/main'

require_relative '../lib/maze'

require_relative '../lib/maze/appium_server'
require_relative '../lib/maze/browser_stack_devices'
require_relative '../lib/maze/browser_stack_utils'
require_relative '../lib/maze/capabilities'
require_relative '../lib/maze/compare'
require_relative '../lib/maze/docker'
require_relative '../lib/maze/document_server'
require_relative '../lib/maze/errors.rb'
require_relative '../lib/maze/helper'
require_relative '../lib/maze/logger'
require_relative '../lib/maze/network'
require_relative '../lib/maze/proxy'
require_relative '../lib/maze/reflective_servlet'
require_relative '../lib/maze/retry_handler'
require_relative '../lib/maze/runner'
require_relative '../lib/maze/sauce_labs_utils'
require_relative '../lib/maze/server'
require_relative '../lib/maze/store'

require_relative '../lib/maze/option'
require_relative '../lib/maze/option/parser'
require_relative '../lib/maze/option/processor'
require_relative '../lib/maze/option/validator'

require_relative '../lib/maze/assertions/request_set_assertions'

require_relative '../lib/maze/hooks/hooks'
require_relative '../lib/maze/hooks/appium_hooks'
require_relative '../lib/maze/hooks/browser_hooks'
require_relative '../lib/maze/hooks/command_hooks'

require_relative '../lib/maze/driver/appium'
require_relative '../lib/maze/driver/browser'
require_relative '../lib/maze/driver/resilient_appium'

require_relative '../lib/maze/plugins/global_retry_plugin'

# Encapsulates the MazeRunner entry point
class MazeRunnerEntry

  # Removes Maze Runner specific args from the array, as these will cause Cucumber to error.
  def remove_maze_runner_args
    Maze::Option.constants.each do |opt|
      name = Maze::Option.const_get(opt)
      @args.reject! { |arg| arg == "--#{name}" || (arg.start_with? "--#{name}=") || arg == "--no-#{name}" }
    end
  end

  # Adds arguments to Cucumber
  def add_cucumber_args
    @args << 'features' if @args.empty?
    @args << '--publish-quiet'

    # Pass strict mode options through to cucumber if present
    # If not we default to strict for undefined and pending results,
    # but no-strict for flaky in order to allow retries
    regex = /--(no-)?strict(-(undefined|pending|flaky))?/
    if @args.all? { |arg| regex.match(arg).nil? }
      @args << '--strict-undefined' << '--strict-pending' << '--no-strict-flaky'
    end

    # Load internal steps and helper functions
    load_dir = File.expand_path(File.dirname(File.dirname(__FILE__))).freeze
    paths = Dir.glob("#{load_dir}/lib/features/**/*.rb")

    # Load project-specific steps and helper functions
    paths += Dir.glob('features/{support,steps}/*.rb')
    paths.each { |path| @args << '-r' << path }
  end

  def start(args)
    $logger.info "Maze Runner v#{Maze::VERSION}"

    # Parse args, processing any Maze Runner specific options
    @args = args.dup
    options = Maze::Option::Parser.parse args

    # Validate CL options
    errors = Maze::Option::Validator.new.validate options
    unless errors.empty?
      puts errors
      exit 1
    end

    Maze::Option::Processor.populate Maze.config, options

    # Adjust CL options before calling down to Cucumber
    remove_maze_runner_args
    add_cucumber_args

    Cucumber::Cli::Main.new(@args).execute!
  end
end

MazeRunnerEntry.new.start(ARGV)
