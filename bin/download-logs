#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/maze'
require_relative '../lib/maze/logger'
require 'net/http'
require 'json'
require 'uri'

class DownloadLogEntry
  def build_info(username, access_key, build_name)
    begin
      # Get the ID of a build
      uri = URI("https://api.browserstack.com/app-automate/builds.json?name=#{build_name}")
      request = Net::HTTP::Get.new(uri)
      request.basic_auth(username, access_key)

      res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
        http.request(request)
      end

      build_id = JSON.parse(res.body)
      build_id = build_id[0]['automation_build']['hashed_id']

      # Get the build info
      uri = URI("https://api.browserstack.com/app-automate/builds/#{build_id}/sessions")
      request = Net::HTTP::Get.new(uri)
      request.basic_auth(username, access_key)

      res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
        http.request(request)
      end

      build_json = JSON.parse(res.body)
    rescue StandardError => e
      $logger.warn "Unable to get build info: #{e}"
    end
  end

  def start(args)

    config = Maze.config
    build_name = []

    # Check if argument is a file
    if File.file? args[0]
      File.readlines(args[0]).each do |line|
        build_name << line
      end
    else
      build_name << args[0]
    end

    build_name.each do |name|
      $logger.info "Getting build ID for #{name}"
      build_id = build_info config.username,
                            config.access_key,
                            name

      $logger.info "Build ID: #{build_id}"
    end
  end
end

DownloadLogEntry.new.start(ARGV)
