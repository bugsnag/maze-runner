#!/usr/bin/env ruby
# frozen_string_literal: true

require 'cucumber/cli/main'
require_relative '../lib/maze/option'
require_relative '../lib/maze/option/parser'
require_relative '../lib/maze/option/processor'
require_relative '../lib/maze/option/validator'
require_relative '../lib/maze'
require_relative '../lib/maze/assertions/request_set_assertions'
require_relative '../lib/maze/capabilities'
require_relative '../lib/maze/devices'
require_relative '../lib/maze/hooks/hooks'
require_relative '../lib/maze/browser_stack_utils'
require_relative '../lib/maze/compare'
require_relative '../lib/maze/docker'
require_relative '../lib/maze/driver/appium'
require_relative '../lib/maze/driver/resilient_appium'
require_relative '../lib/maze/driver/selenium'
require_relative '../lib/maze/helper'
require_relative '../lib/maze/logger'
require_relative '../lib/maze/runner'
require_relative '../lib/maze/proxy'
require_relative '../lib/maze/server'
require_relative '../lib/maze/store'

# Encapsulates the MazeRunner entry point
class MazeRunnerEntry

  def init
    require_relative 'commands/init'
    exit 0
  end

  # Removes Maze Runner specific args from the array, as these will cause Cucumber to error.
  def remove_maze_runner_args
    remove = [
      Maze::Option::SEPARATE_SESSIONS,
      Maze::Option::APP,
      Maze::Option::BS_LOCAL,
      Maze::Option::BS_DEVICE,
      Maze::Option::BS_BROWSER,
      Maze::Option::OS,
      Maze::Option::OS_VERSION,
      Maze::Option::FARM,
      Maze::Option::USERNAME,
      Maze::Option::ACCESS_KEY,
      Maze::Option::APPIUM_SERVER,
      Maze::Option::A11Y_LOCATOR,
      Maze::Option::UDID,
      Maze::Option::APPLE_TEAM_ID,
      Maze::Option::BS_APPIUM_VERSION,
      Maze::Option::RESILIENT,
      Maze::Option::CAPABILITIES
    ]
    remove.each do |opt|
      @args.reject! { |arg| arg == "--#{opt}" || (arg.start_with? "--#{opt}=") }
    end
  end

  # Adds arguments to Cucumber
  def add_cucumber_args
    @args << 'features' if @args.empty?

    # Add strict mode unless any no/strict option is given,
    # but also allow flaky tests if --retry was provided.
    regex = /--(no-)?strict(-(undefined|pending|flaky))?/
    if @args.all? { |arg| regex.match(arg).nil? }
      if @args.any? '--retry'
        @args << '--strict-undefined' << '--strict-pending'
      else
        @args << '--strict'
      end
    end

    # Load internal steps and helper functions
    load_dir = File.expand_path(File.dirname(File.dirname(__FILE__))).freeze
    paths = Dir.glob("#{load_dir}/lib/features/**/*.rb")

    # Load project-specific steps and helper functions
    paths += Dir.glob('features/{support,steps}/*.rb')
    paths.each { |path| @args << '-r' << path }
  end

  def start(args)
    # Parse args, processing any Maze Runner specific options
    @args = args.dup
    options = Maze::Option::Parser.parse args

    # Validate CL options
    errors = Maze::Option::Validator.new.validate options
    unless errors.empty?
      puts errors
      exit 1
    end

    #
    init if options[:init]
    Maze::Option::Processor.populate Maze.config, options

    # Adjust CL options before calling down to Cucumber
    remove_maze_runner_args
    add_cucumber_args

    Cucumber::Cli::Main.new(@args).execute!
  end
end

MazeRunnerEntry.new.start(ARGV)
