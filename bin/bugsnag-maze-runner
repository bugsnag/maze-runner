#!/usr/bin/env ruby
# frozen_string_literal: true

require 'cucumber/cli/main'
require 'optimist'
require_relative '../lib/features/support/maze_runner'
require_relative '../lib/features/support/option'
require_relative '../lib/features/support/capabilities/capabilities'
require_relative '../lib/features/support/capabilities/devices'
require_relative '../lib/version'

# Encapsulates the MazeRunner entry point
class MazeRunnerEntry

  def initialize
    @parser = Optimist::Parser.new do
      text 'Maze Runner extends the functionality of Cucumber, ' \
        'providing all of the command line arguments that it provides.'
      text ''
      text 'Usage [OPTIONS] <filenames>'
      text ''
      text 'Overridden Cucumber options:'
      opt :help, 'Print this help.'
      opt :init, 'Initialises a new Maze Runner project'

      opt :version, 'Display Maze Runner and Cucumber versions'

      # Common options
      opt Option::SEPARATE_SESSIONS,
          'Start a new Appium session for each scenario',
          short: :none,
          type: :boolean,
          default: false
      opt Option::FARM, 'Device farm to use: "bs" (BrowserStack) or "local"', short: :none, type: :string
      opt Option::APP, 'The app to be installed and run against', short: :none, type: :string
      opt Option::A11Y_LOCATOR,
          'Locate elements by accessibility id rather than id',
          short: :none,
          type: :boolean,
          default: false
      opt Option::RESILIENT,
          'Use the resilient Appium driver',
          short: :none,
          default: false

      # BrowserStack-only options
      opt Option::BS_LOCAL,
          '(BS only) Path to the BrowserStackLocal binary',
          short: :none,
          type: :string,
          default: '/BrowserStackLocal'
      opt Option::BS_DEVICE,
          'BrowserStack device to use (a key of Devices.DEVICE_HASH)',
          short: :none,
          type: :string
      opt Option::USERNAME, 'Device farm username', short: :none, type: :string
      opt Option::ACCESS_KEY, 'Device farm access key', short: :none, type: :string
      opt Option::BS_APPIUM_VERSION,
          'The Appium version to use with BrowserStack',
          short: :none,
          type: :string

      # Local-only options
      opt Option::OS,
          'OS type to use ("ios", "android")',
          short: :none,
          type: :string
      opt Option::OS_VERSION,
          'The intended OS version when running on a local device',
          short: :none,
          type: :string
      opt Option::APPIUM_SERVER,
          'Appium server URL, only used for --farm=local',
          short: :none,
          type: :string,
          default: 'http://localhost:4723/wd/hub'
      opt Option::APPLE_TEAM_ID, 'Apple Team Id, required for local iOS testing', short: :none, type: :string
      opt Option::UDID, 'Apple UDID, required for local iOS testing', short: :none, type: :string

      version "Maze Runner v#{BugsnagMazeRunner::VERSION} " \
              "(Cucumber v#{Cucumber::VERSION.strip})"
      text ''
      text 'The Cucumber help follows:'
      text ''
    end

    # Allow for options destined for Cucumber
    @parser.ignore_invalid_options = true
  end

  def init
    require_relative 'commands/init'
    exit 0
  end

  # Removes Maze Runner specific args from the array, as these will cause Cucumber to error.
  def remove_maze_runner_args
    remove = [
      Option::SEPARATE_SESSIONS,
      Option::APP,
      Option::BS_LOCAL,
      Option::BS_DEVICE,
      Option::OS,
      Option::OS_VERSION,
      Option::FARM,
      Option::USERNAME,
      Option::ACCESS_KEY,
      Option::APPIUM_SERVER,
      Option::A11Y_LOCATOR,
      Option::UDID,
      Option::APPLE_TEAM_ID,
      Option::BS_APPIUM_VERSION,
      Option::RESILIENT
    ]
    remove.each do |opt|
      @args.reject! { |arg| arg == "--#{opt}" || (arg.start_with? "--#{opt}=") }
    end
  end

  # Adds arguments to Cucumber
  def add_cucumber_args
    @args << 'features' if @args.empty?

    # Add strict mode unless any no/strict option is given,
    # but also allow flaky tests if --retry was provided.
    regex = /--(no-)?strict(-(undefined|pending|flaky))?/
    if @args.all? { |arg| regex.match(arg).nil? }
      if @args.any? '--retry'
        @args << '--strict-undefined' << '--strict-pending'
      else
        @args << '--strict'
      end
    end

    # Load internal steps and helper functions
    load_dir = File.expand_path(File.dirname(File.dirname(__FILE__))).freeze
    paths = Dir.glob("#{load_dir}/lib/features/**/*.rb")

    # Load project-specific steps and helper functions
    paths += Dir.glob('features/{support,steps}/*.rb')
    paths.each { |path| @args << '-r' << path }
  end

  def start(args)
    # Parse args, processing any Maze Runner specific options
    @args = args.dup
    options = @parser.parse args

    # Process CL options
    init if options[:init]
    config = MazeRunner.config
    config.appium_session_isolation = options[Option::SEPARATE_SESSIONS]
    config.app_location = options[Option::APP]
    config.resilient = options[Option::RESILIENT]
    farm = options[Option::FARM]
    config.farm = case farm
                  when nil then :none
                  when 'bs' then :bs
                  when 'local' then :local
                  else
                    raise "Unknown farm '#{farm}'"
                  end
    config.locator = options[Option::A11Y_LOCATOR] ? :accessibility_id : :id

    # Farm specific options
    case config.farm
    when :bs then
      raise "option --#{Option::USERNAME} must be specified" if options[Option::USERNAME].nil?
      raise "option --#{Option::ACCESS_KEY} must be specified" if options[Option::ACCESS_KEY].nil?

      bs_device = options[Option::BS_DEVICE]
      raise "option --#{Option::BS_DEVICE} must be specified" if bs_device.nil?
      unless Devices::DEVICE_HASH.key? bs_device
        raise "Device type '#{bs_device}' not known on BrowserStack.  Must be one of #{Devices::DEVICE_HASH.keys}"
      end

      config.bs_device = bs_device
      config.os_version = Devices::DEVICE_HASH[config.bs_device]['os_version'].to_f
      config.bs_local = options[Option::BS_LOCAL]
      config.appium_version = options[Option::BS_APPIUM_VERSION]
      username = config.username = options[Option::USERNAME]
      access_key = config.access_key = options[Option::ACCESS_KEY]
      config.appium_server_url = "http://#{username}:#{access_key}@hub-cloud.browserstack.com/wd/hub"
    when :local then
      raise "option --#{Option::OS} must be specified" if options[Option::OS].nil?
      raise "option --#{Option::OS_VERSION} must be specified" if options[Option::OS_VERSION].nil?
      # Ensure OS version is a valid float so that notifier tests can perform numeric checks, e.g:
      # 'MazeRunner.config.os_version > 7'
      unless /^[1-9][0-9]*(\.[0-9])?/.match? options[Option::OS_VERSION]
        raise "option --#{Option::OS_VERSION} must be a valid OS version matching '/^[1-9][0-9]*(\\.[0-9])?/'"
      end

      os = MazeRunner.config.os = options[Option::OS].downcase
      MazeRunner.config.os_version = options[Option::OS_VERSION].to_f
      raise 'os must be ios or android' unless %w[ios android].include? os

      config.appium_server_url = options[Option::APPIUM_SERVER]
      if os == 'ios'
        raise 'option --apple-team-id must be specified for iOS' if options[Option::APPLE_TEAM_ID].nil?
        raise 'option --udid must be specified for iOS' if options[Option::UDID].nil?

        config.apple_team_id = options[Option::APPLE_TEAM_ID]
        config.device_id = options[Option::UDID]
      end
    end

    # Adjust CL options before calling down to Cucumber
    remove_maze_runner_args
    add_cucumber_args

    Cucumber::Cli::Main.new(@args).execute!

  rescue Optimist::HelpNeeded
    # Display
    @parser.educate
    Cucumber::Cli::Main.new(['--help']).execute!

  rescue Optimist::VersionNeeded
    puts @parser.version
  end
end

MazeRunnerEntry.new.start(ARGV)
